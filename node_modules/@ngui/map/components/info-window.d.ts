/// <reference types="googlemaps" />
import { ElementRef, EventEmitter, SimpleChanges, ViewContainerRef, OnInit, OnChanges, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { NguiMap } from '../services/ngui-map';
import { NguiMapComponent } from './ngui-map.component';
import * as ɵngcc0 from '@angular/core';
export declare class InfoWindow implements OnInit, OnChanges, OnDestroy {
    private elementRef;
    private nguiMap;
    private nguiMapComponent;
    content: any;
    disableAutoPan: any;
    maxWidth: any;
    pixelOffset: any;
    position: any;
    zIndex: any;
    options: any;
    closeclick: any;
    content_changed: any;
    domready: any;
    position_changed: any;
    zindex_changed: any;
    initialized$: EventEmitter<any>;
    infoWindow: google.maps.InfoWindow;
    objectOptions: google.maps.InfoWindowOptions;
    inputChanges$: Subject<{}>;
    template: ViewContainerRef;
    constructor(elementRef: ElementRef, nguiMap: NguiMap, nguiMapComponent: NguiMapComponent);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    initialize(): void;
    open(anchor: google.maps.MVCObject): void;
    close(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InfoWindow>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InfoWindow, "ngui-map > info-window", never, {
    "content": "content";
    "disableAutoPan": "disableAutoPan";
    "maxWidth": "maxWidth";
    "pixelOffset": "pixelOffset";
    "position": "position";
    "zIndex": "zIndex";
    "options": "options";
}, {
    "closeclick": "closeclick";
    "content_changed": "content_changed";
    "domready": "domready";
    "position_changed": "position_changed";
    "zindex_changed": "zindex_changed";
    "initialized$": "initialized$";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mby13aW5kb3cuZC50cyIsInNvdXJjZXMiOlsiaW5mby13aW5kb3cuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRCQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZ29vZ2xlbWFwc1wiIC8+XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIFZpZXdDb250YWluZXJSZWYsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5ndWlNYXAgfSBmcm9tICcuLi9zZXJ2aWNlcy9uZ3VpLW1hcCc7XG5pbXBvcnQgeyBOZ3VpTWFwQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3VpLW1hcC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5mb1dpbmRvdyBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIG5ndWlNYXA7XG4gICAgcHJpdmF0ZSBuZ3VpTWFwQ29tcG9uZW50O1xuICAgIGNvbnRlbnQ6IGFueTtcbiAgICBkaXNhYmxlQXV0b1BhbjogYW55O1xuICAgIG1heFdpZHRoOiBhbnk7XG4gICAgcGl4ZWxPZmZzZXQ6IGFueTtcbiAgICBwb3NpdGlvbjogYW55O1xuICAgIHpJbmRleDogYW55O1xuICAgIG9wdGlvbnM6IGFueTtcbiAgICBjbG9zZWNsaWNrOiBhbnk7XG4gICAgY29udGVudF9jaGFuZ2VkOiBhbnk7XG4gICAgZG9tcmVhZHk6IGFueTtcbiAgICBwb3NpdGlvbl9jaGFuZ2VkOiBhbnk7XG4gICAgemluZGV4X2NoYW5nZWQ6IGFueTtcbiAgICBpbml0aWFsaXplZCQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGluZm9XaW5kb3c6IGdvb2dsZS5tYXBzLkluZm9XaW5kb3c7XG4gICAgb2JqZWN0T3B0aW9uczogZ29vZ2xlLm1hcHMuSW5mb1dpbmRvd09wdGlvbnM7XG4gICAgaW5wdXRDaGFuZ2VzJDogU3ViamVjdDx7fT47XG4gICAgdGVtcGxhdGU6IFZpZXdDb250YWluZXJSZWY7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgbmd1aU1hcDogTmd1aU1hcCwgbmd1aU1hcENvbXBvbmVudDogTmd1aU1hcENvbXBvbmVudCk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBpbml0aWFsaXplKCk6IHZvaWQ7XG4gICAgb3BlbihhbmNob3I6IGdvb2dsZS5tYXBzLk1WQ09iamVjdCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19