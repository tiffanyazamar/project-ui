/// <reference types="googlemaps" />
import { ElementRef, EventEmitter, SimpleChanges, NgZone, AfterViewInit, AfterViewChecked, OnChanges, OnDestroy } from '@angular/core';
import { OptionBuilder } from '../services/option-builder';
import { NavigatorGeolocation } from '../services/navigator-geolocation';
import { GeoCoder } from '../services/geo-coder';
import { NguiMap } from '../services/ngui-map';
import { NgMapApiLoader } from '../services/api-loader';
import { InfoWindow } from './info-window';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class NguiMapComponent implements OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {
    optionBuilder: OptionBuilder;
    elementRef: ElementRef;
    geolocation: NavigatorGeolocation;
    geoCoder: GeoCoder;
    nguiMap: NguiMap;
    apiLoader: NgMapApiLoader;
    zone: NgZone;
    backgroundColor: any;
    center: any;
    disableDefaultUI: any;
    disableDoubleClickZoom: any;
    draggable: any;
    draggableCursor: any;
    draggingCursor: any;
    heading: any;
    keyboardShortcuts: any;
    mapMaker: any;
    mapTypeControl: any;
    mapTypeId: any;
    maxZoom: any;
    minZoom: any;
    noClear: any;
    overviewMapControl: any;
    panControl: any;
    panControlOptions: any;
    rotateControl: any;
    scaleControl: any;
    scrollwheel: any;
    streetView: any;
    styles: any;
    tilt: any;
    zoom: any;
    streetViewControl: any;
    zoomControl: any;
    zoomControlOptions: any;
    mapTypeControlOptions: any;
    overviewMapControlOptions: any;
    rotateControlOptions: any;
    scaleControlOptions: any;
    streetViewControlOptions: any;
    fullscreenControl: any;
    fullscreenControlOptions: any;
    options: any;
    geoFallbackCenter: any;
    bounds_changed: any;
    center_changed: any;
    click: any;
    dblclick: any;
    drag: any;
    dragend: any;
    dragstart: any;
    heading_changed: any;
    idle: any;
    maptypeid_changed: any;
    mousemove: any;
    mouseout: any;
    mouseover: any;
    projection_changed: any;
    resize: any;
    rightclick: any;
    tilesloaded: any;
    tile_changed: any;
    zoom_changed: any;
    mapClick: any;
    mapMouseover: any;
    mapMouseout: any;
    mapMousemove: any;
    mapDrag: any;
    mapDragend: any;
    mapDragstart: any;
    mapReady$: EventEmitter<any>;
    el: HTMLElement;
    map: google.maps.Map;
    mapOptions: google.maps.MapOptions;
    inputChanges$: Subject<{}>;
    infoWindows: {
        [id: string]: InfoWindow;
    };
    mapIdledOnce: boolean;
    private initializeMapAfterDisplayed;
    private apiLoaderSub;
    constructor(optionBuilder: OptionBuilder, elementRef: ElementRef, geolocation: NavigatorGeolocation, geoCoder: GeoCoder, nguiMap: NguiMap, apiLoader: NgMapApiLoader, zone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): void;
    initializeMap(): void;
    setCenter(): void;
    openInfoWindow(id: string, anchor: google.maps.MVCObject): void;
    closeInfoWindow(id: string): void;
    ngOnDestroy(): void;
    addToMapObjectGroup(mapObjectName: string, mapObject: any): void;
    removeFromMapObjectGroup(mapObjectName: string, mapObject: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NguiMapComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NguiMapComponent, "ngui-map", never, {
    "backgroundColor": "backgroundColor";
    "center": "center";
    "disableDefaultUI": "disableDefaultUI";
    "disableDoubleClickZoom": "disableDoubleClickZoom";
    "draggable": "draggable";
    "draggableCursor": "draggableCursor";
    "draggingCursor": "draggingCursor";
    "heading": "heading";
    "keyboardShortcuts": "keyboardShortcuts";
    "mapMaker": "mapMaker";
    "mapTypeControl": "mapTypeControl";
    "mapTypeId": "mapTypeId";
    "maxZoom": "maxZoom";
    "minZoom": "minZoom";
    "noClear": "noClear";
    "overviewMapControl": "overviewMapControl";
    "panControl": "panControl";
    "panControlOptions": "panControlOptions";
    "rotateControl": "rotateControl";
    "scaleControl": "scaleControl";
    "scrollwheel": "scrollwheel";
    "streetView": "streetView";
    "styles": "styles";
    "tilt": "tilt";
    "zoom": "zoom";
    "streetViewControl": "streetViewControl";
    "zoomControl": "zoomControl";
    "zoomControlOptions": "zoomControlOptions";
    "mapTypeControlOptions": "mapTypeControlOptions";
    "overviewMapControlOptions": "overviewMapControlOptions";
    "rotateControlOptions": "rotateControlOptions";
    "scaleControlOptions": "scaleControlOptions";
    "streetViewControlOptions": "streetViewControlOptions";
    "fullscreenControl": "fullscreenControl";
    "fullscreenControlOptions": "fullscreenControlOptions";
    "options": "options";
    "geoFallbackCenter": "geoFallbackCenter";
}, {
    "bounds_changed": "bounds_changed";
    "center_changed": "center_changed";
    "click": "click";
    "dblclick": "dblclick";
    "drag": "drag";
    "dragend": "dragend";
    "dragstart": "dragstart";
    "heading_changed": "heading_changed";
    "idle": "idle";
    "maptypeid_changed": "maptypeid_changed";
    "mousemove": "mousemove";
    "mouseout": "mouseout";
    "mouseover": "mouseover";
    "projection_changed": "projection_changed";
    "resize": "resize";
    "rightclick": "rightclick";
    "tilesloaded": "tilesloaded";
    "tile_changed": "tile_changed";
    "zoom_changed": "zoom_changed";
    "mapClick": "mapClick";
    "mapMouseover": "mapMouseover";
    "mapMouseout": "mapMouseout";
    "mapMousemove": "mapMousemove";
    "mapDrag": "mapDrag";
    "mapDragend": "mapDragend";
    "mapDragstart": "mapDragstart";
    "mapReady$": "mapReady$";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1aS1tYXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5ndWktbWFwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkZBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJnb29nbGVtYXBzXCIgLz5cbmltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgU2ltcGxlQ2hhbmdlcywgTmdab25lLCBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3B0aW9uQnVpbGRlciB9IGZyb20gJy4uL3NlcnZpY2VzL29wdGlvbi1idWlsZGVyJztcbmltcG9ydCB7IE5hdmlnYXRvckdlb2xvY2F0aW9uIH0gZnJvbSAnLi4vc2VydmljZXMvbmF2aWdhdG9yLWdlb2xvY2F0aW9uJztcbmltcG9ydCB7IEdlb0NvZGVyIH0gZnJvbSAnLi4vc2VydmljZXMvZ2VvLWNvZGVyJztcbmltcG9ydCB7IE5ndWlNYXAgfSBmcm9tICcuLi9zZXJ2aWNlcy9uZ3VpLW1hcCc7XG5pbXBvcnQgeyBOZ01hcEFwaUxvYWRlciB9IGZyb20gJy4uL3NlcnZpY2VzL2FwaS1sb2FkZXInO1xuaW1wb3J0IHsgSW5mb1dpbmRvdyB9IGZyb20gJy4vaW5mby13aW5kb3cnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd1aU1hcENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkIHtcbiAgICBvcHRpb25CdWlsZGVyOiBPcHRpb25CdWlsZGVyO1xuICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgZ2VvbG9jYXRpb246IE5hdmlnYXRvckdlb2xvY2F0aW9uO1xuICAgIGdlb0NvZGVyOiBHZW9Db2RlcjtcbiAgICBuZ3VpTWFwOiBOZ3VpTWFwO1xuICAgIGFwaUxvYWRlcjogTmdNYXBBcGlMb2FkZXI7XG4gICAgem9uZTogTmdab25lO1xuICAgIGJhY2tncm91bmRDb2xvcjogYW55O1xuICAgIGNlbnRlcjogYW55O1xuICAgIGRpc2FibGVEZWZhdWx0VUk6IGFueTtcbiAgICBkaXNhYmxlRG91YmxlQ2xpY2tab29tOiBhbnk7XG4gICAgZHJhZ2dhYmxlOiBhbnk7XG4gICAgZHJhZ2dhYmxlQ3Vyc29yOiBhbnk7XG4gICAgZHJhZ2dpbmdDdXJzb3I6IGFueTtcbiAgICBoZWFkaW5nOiBhbnk7XG4gICAga2V5Ym9hcmRTaG9ydGN1dHM6IGFueTtcbiAgICBtYXBNYWtlcjogYW55O1xuICAgIG1hcFR5cGVDb250cm9sOiBhbnk7XG4gICAgbWFwVHlwZUlkOiBhbnk7XG4gICAgbWF4Wm9vbTogYW55O1xuICAgIG1pblpvb206IGFueTtcbiAgICBub0NsZWFyOiBhbnk7XG4gICAgb3ZlcnZpZXdNYXBDb250cm9sOiBhbnk7XG4gICAgcGFuQ29udHJvbDogYW55O1xuICAgIHBhbkNvbnRyb2xPcHRpb25zOiBhbnk7XG4gICAgcm90YXRlQ29udHJvbDogYW55O1xuICAgIHNjYWxlQ29udHJvbDogYW55O1xuICAgIHNjcm9sbHdoZWVsOiBhbnk7XG4gICAgc3RyZWV0VmlldzogYW55O1xuICAgIHN0eWxlczogYW55O1xuICAgIHRpbHQ6IGFueTtcbiAgICB6b29tOiBhbnk7XG4gICAgc3RyZWV0Vmlld0NvbnRyb2w6IGFueTtcbiAgICB6b29tQ29udHJvbDogYW55O1xuICAgIHpvb21Db250cm9sT3B0aW9uczogYW55O1xuICAgIG1hcFR5cGVDb250cm9sT3B0aW9uczogYW55O1xuICAgIG92ZXJ2aWV3TWFwQ29udHJvbE9wdGlvbnM6IGFueTtcbiAgICByb3RhdGVDb250cm9sT3B0aW9uczogYW55O1xuICAgIHNjYWxlQ29udHJvbE9wdGlvbnM6IGFueTtcbiAgICBzdHJlZXRWaWV3Q29udHJvbE9wdGlvbnM6IGFueTtcbiAgICBmdWxsc2NyZWVuQ29udHJvbDogYW55O1xuICAgIGZ1bGxzY3JlZW5Db250cm9sT3B0aW9uczogYW55O1xuICAgIG9wdGlvbnM6IGFueTtcbiAgICBnZW9GYWxsYmFja0NlbnRlcjogYW55O1xuICAgIGJvdW5kc19jaGFuZ2VkOiBhbnk7XG4gICAgY2VudGVyX2NoYW5nZWQ6IGFueTtcbiAgICBjbGljazogYW55O1xuICAgIGRibGNsaWNrOiBhbnk7XG4gICAgZHJhZzogYW55O1xuICAgIGRyYWdlbmQ6IGFueTtcbiAgICBkcmFnc3RhcnQ6IGFueTtcbiAgICBoZWFkaW5nX2NoYW5nZWQ6IGFueTtcbiAgICBpZGxlOiBhbnk7XG4gICAgbWFwdHlwZWlkX2NoYW5nZWQ6IGFueTtcbiAgICBtb3VzZW1vdmU6IGFueTtcbiAgICBtb3VzZW91dDogYW55O1xuICAgIG1vdXNlb3ZlcjogYW55O1xuICAgIHByb2plY3Rpb25fY2hhbmdlZDogYW55O1xuICAgIHJlc2l6ZTogYW55O1xuICAgIHJpZ2h0Y2xpY2s6IGFueTtcbiAgICB0aWxlc2xvYWRlZDogYW55O1xuICAgIHRpbGVfY2hhbmdlZDogYW55O1xuICAgIHpvb21fY2hhbmdlZDogYW55O1xuICAgIG1hcENsaWNrOiBhbnk7XG4gICAgbWFwTW91c2VvdmVyOiBhbnk7XG4gICAgbWFwTW91c2VvdXQ6IGFueTtcbiAgICBtYXBNb3VzZW1vdmU6IGFueTtcbiAgICBtYXBEcmFnOiBhbnk7XG4gICAgbWFwRHJhZ2VuZDogYW55O1xuICAgIG1hcERyYWdzdGFydDogYW55O1xuICAgIG1hcFJlYWR5JDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZWw6IEhUTUxFbGVtZW50O1xuICAgIG1hcDogZ29vZ2xlLm1hcHMuTWFwO1xuICAgIG1hcE9wdGlvbnM6IGdvb2dsZS5tYXBzLk1hcE9wdGlvbnM7XG4gICAgaW5wdXRDaGFuZ2VzJDogU3ViamVjdDx7fT47XG4gICAgaW5mb1dpbmRvd3M6IHtcbiAgICAgICAgW2lkOiBzdHJpbmddOiBJbmZvV2luZG93O1xuICAgIH07XG4gICAgbWFwSWRsZWRPbmNlOiBib29sZWFuO1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZU1hcEFmdGVyRGlzcGxheWVkO1xuICAgIHByaXZhdGUgYXBpTG9hZGVyU3ViO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbkJ1aWxkZXI6IE9wdGlvbkJ1aWxkZXIsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGdlb2xvY2F0aW9uOiBOYXZpZ2F0b3JHZW9sb2NhdGlvbiwgZ2VvQ29kZXI6IEdlb0NvZGVyLCBuZ3VpTWFwOiBOZ3VpTWFwLCBhcGlMb2FkZXI6IE5nTWFwQXBpTG9hZGVyLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGluaXRpYWxpemVNYXAoKTogdm9pZDtcbiAgICBzZXRDZW50ZXIoKTogdm9pZDtcbiAgICBvcGVuSW5mb1dpbmRvdyhpZDogc3RyaW5nLCBhbmNob3I6IGdvb2dsZS5tYXBzLk1WQ09iamVjdCk6IHZvaWQ7XG4gICAgY2xvc2VJbmZvV2luZG93KGlkOiBzdHJpbmcpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgYWRkVG9NYXBPYmplY3RHcm91cChtYXBPYmplY3ROYW1lOiBzdHJpbmcsIG1hcE9iamVjdDogYW55KTogdm9pZDtcbiAgICByZW1vdmVGcm9tTWFwT2JqZWN0R3JvdXAobWFwT2JqZWN0TmFtZTogc3RyaW5nLCBtYXBPYmplY3Q6IGFueSk6IHZvaWQ7XG59XG4iXX0=